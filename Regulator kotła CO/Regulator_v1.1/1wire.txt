#include <avr/io.h>
#include <avr/delay.h>
#include <avr/interrupt.h>
#include <avr/signal.h>

#define DQ 5

#define SET_DQ DDRD &= ~_BV(DQ)
#define CLR_DQ DDRD |= _BV(DQ)

#define IN_DQ PIND & _BV(DQ)
char znaki[17] = {192,249,164,176,153,146,130,248,128,144};
char wysw = 0;
unsigned char d1, d2;
// procedura obs³ugi przerwania od timera TC0
SIGNAL (SIG_OVERFLOW0)
  {
  TCNT0 = 250; // za³adowanie do licznika wartoœci pocz¹tkowej
  PORTD |= _BV(4); // wygaszenie wszystkich cyfr wyœwietlacza
  PORTD |= _BV(3);
  PORTB = 0xFF;
  wysw++; // zwiêkszenie o 1 zmiennej wysw
  // w zale¿noœci od wartoœci wysw w³¹cz odpowiedni¹ cyfrê na wyœwietlaczu
    switch(wysw){
    case 1:
    {
    PORTD &= ~_BV(4); // w³¹cz pierwsz¹ cyfrê wyœwietlcza
    PORTB = *(znaki + d2); // na wyœwietlaczu wyœwietl odpowiedni znak
    // pobrany z tablicy znaków
    break; // opuœæ instrukcjê switch
    }
    case 2:
    {
    PORTD &= ~_BV(3); // w³¹cz drug¹ cyfrê wyœwietlcza
    PORTB = *(znaki + d1); // na wyœwietlaczu wyœwietl odpowiedni znak
    // pobrany z tablicy znaków
    wysw = 0;
    break; // opuœæ instrukcjê switch
    }
    }
}
// procedura opóŸniaj¹ca o (5+5*t)* 0,25 us dla 4MHz kwarcu
void delay(unsigned char t)
  {
  do{asm("nop");}while(--t);
}
// procedura reset
void ow_reset(void)
  {
  CLR_DQ; // stan niski na linii 1wire
  delay(255); //
  delay(119); // opóŸnienie ok 480us
  //delay(1);
  SET_DQ;// stan wysoki na linii 1wire
  delay(255); //
  delay(119); // opóŸnienie ok 480 us
}
// procedura zapisu bitu na liniê 1wire
void ow_write_bit(char b)
  {
  cli(); // zablokowanie przerwañ
  CLR_DQ; // stan niski na linii 1wire
  delay(7); // opóŸnienie 10us
  if(b) SET_DQ; // jeœli parametr jest niezerowy to ustaw stan wysoki na linii
  delay(80); // opóŸnienie 100us
  SET_DQ; // stan wysoki na linii 1wire
  sei(); // odblokowanie pzrerwañ
}

char ow_read_bit(void)
  {
  cli();
  CLR_DQ;
  delay(1);
  SET_DQ;
  delay(11);
  sei();
  if(IN_DQ) return 1; else return 0;
}

unsigned char ow_read_byte(void)
  {
  unsigned char i;
  unsigned char value = 0;
  for (i=0;i<8;i++)
  {
  if(ow_read_bit()) value|=0x01<<i;
  delay(6);
  }
  return(value);
}

void ow_write_byte(char val)
  {
  unsigned char i;
  unsigned char temp;
  for (i=0; i<8; i++)
  {
  temp = val >> i;
  temp &= 0x01;
  ow_write_bit(temp);
  }
  delay(5);
}

int main(void)
      {
      char msb, lsb, temp;
      //
      TCCR0 = 0x04;
      // wpisanie wartoœci pocz¹tkowej
      TCNT0 = 250;
      // odblokowanie przerwania od licznika
      TIMSK = 0x02;
      // globalne odblokowanie przerwañ
      sei();
      //
      DDRB = 0xFF;
      //
      DDRD |= _BV(4);
      //
      DDRD |= _BV(3);
      //
      //PORTD |= _BV(DQ);
      while(1)
      {
      ow_reset();
      ow_write_byte(0xCC);
      ow_write_byte(0x44);
      _delay_ms(250);
      _delay_ms(250);
      _delay_ms(250);
      ow_reset();
      ow_write_byte(0xCC);
      ow_write_byte(0xBE);
      lsb = ow_read_byte();
      msb = ow_read_byte();
      
      lsb = lsb >> 4;
      msb &= 0x07;
      msb = msb << 4;
      temp = lsb | msb;
      d2 = temp / 10;
      d1 = temp % 10;
      }
      return 0;
}
